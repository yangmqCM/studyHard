git is a version control system
Git is free software distributed under the Gpl
Git的命令实在是太多了，焦灼咋记录哟。
多次使用，记得使用，每天使用，每天重复
学无止境，马不停蹄，每天学习，每天进步，不骄不躁，不懈怠

接下来表达一下我学习git的过程（总结）：
https://git-scm.com/downloads 下载安装

https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000   廖雪峰的官方网站(这里我没有参考官方的教程)

https://git-scm.com/book/zh/v1/（官网详细教程）

http://git.mydoc.io/?t=154712（码云文档）

下面是我学习廖雪峰的官方网站的指令
开始>git>git bash
1.建立本地的git库
admin@admin-PC MINGW64 ~
$ git config --global user.name "yangmq"

admin@admin-PC MINGW64 ~
$ git config --global user.email 15827408750@163.com

admin@admin-PC MINGW64 ~
$ mkdir E:/studyHard

admin@admin-PC MINGW64 ~
$ cd E:/studyHard

admin@admin-PC MINGW64 /e/studyHard
$ pwd
/e/studyHard

admin@admin-PC MINGW64 /e/studyHard
$ git init
Initialized empty Git repository in E:/studyHard/.git/

2.本地文件add到缓存区，然后提交到本地git库
admin@admin-PC MINGW64 /e/studyHard (master)
$ git add studyGit.txt

admin@admin-PC MINGW64 /e/studyHard (master)
$ git commit -m "wrote a readme file"
 
 
3.熟悉git命令的使用
admin@admin-PC MINGW64 /e/studyHard (master)
$ git log --pretty=online 

admin@admin-PC MINGW64 /e/studyHard (master)
$ git reset --hard HEAD^ 

admin@admin-PC MINGW64 /e/studyHard (master)
$ cat studyGit.txt
 
admin@admin-PC MINGW64 /e/studyHard (master)
$ git reflog 

admin@admin-PC MINGW64 /e/studyHard (master)
$ git status 

admin@admin-PC MINGW64 /e/studyHard (master)
$ git rm test.txt 

admin@admin-PC MINGW64 /e/studyHard (master)
$ git commit -m "remove test.txt" 

admin@admin-PC MINGW64 /e/studyHard (master)
$ git checkout -- test.txt

4.在github上注册，创建一个github，然后把本地git同步到github上
admin@admin-PC MINGW64 /e/studyHard (master)
$ git remote add origin git@github.com:yangmqCM/studyHard.git

admin@admin-PC MINGW64 /e/studyHard (master)
$ git push -u origin master

The authenticity of host 'github.com (192.30.253.112)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of know                                                                                                                                                                                               n hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

4.1.1  Permission denied (publickey).显然这里出现了问题！！！！！
这里没有ssh
检测一下
admin@admin-PC MINGW64 /e/studyHard (master)
$ ssh -t git@github.com
Permission denied (publickey).

创建一个ssh
admin@admin-PC MINGW64 /e/studyHard (master)
$ ssh-keygen -t rsa -C "15827408750@163.com"

你可以去/c/Users/admin/.ssh/id_rsa.pub.复制出来，
也可以使用$ cat ~/.ssh/id_rsa.pub查看，然后复制出来，
然后在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。
setting>SSH and GPG keys >SSH Keys 

标题：自主，但是自己要清楚：例如git-tutorial
key就是/c/Users/admin/.ssh/id_rsa.pub.文件中的内容

检测是否成功
admin@admin-PC MINGW64 ~/.ssh
$ ssh git@github.com

admin@admin-PC MINGW64 /e/studyHard (master)  
$ git push -u origin master

end....你可以去你的github上看你的东西了。

 出现异常情况：
（1）搭建个人Git服务器；
（2）备份旧 ssh keys ，并重新生成新的 ssh keys；
（3）想到旧的 ssh keys 是提供给GitHub要用的就又改回去；
（4）再 push 项目到 Github 的时候，提示让我输入 id_rsa。正确输入 id_rsa 后遇到了作者所述异常；

这个就是备份备份旧 ssh keys ，并重新生成新的 ssh keys；
admin@admin-PC MINGW64 /e/studyHard (master)
$ cd ~/.ssh

admin@admin-PC MINGW64 ~/.ssh
$ mkdir key_backup

admin@admin-PC MINGW64 ~/.ssh
$ cp id_rsa* key_backup

admin@admin-PC MINGW64 ~/.ssh
$ rm id_rsa*

admin@admin-PC MINGW64 ~/.ssh
$ ssh-keygen -t rsa -C "15827408750@163.com"

admin@admin-PC MINGW64 ~/.ssh   //这里也要检查。
$ ssh git@github.com

admin@admin-PC MINGW64 ~/.ssh
$ cd ..

admin@admin-PC MINGW64 ~
$ cd E:/

admin@admin-PC MINGW64 /e
$ cd studyHard

admin@admin-PC MINGW64 /e    //把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库
$ git remote add origin git@github.com:yangmqCM/studyHard.git

admin@admin-PC MINGW64 /e/studyHard (master) //第一次把本地库的所有内容推送到远程库上
$ git push -u origin master

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

Counting objects: 21, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (21/21), 1.81 KiB | 0 bytes/s, done.
Total 21 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), done.
To github.com:yangmqCM/studyHard.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.

https://segmentfault.com/q/1010000003061640
http://blog.csdn.net/echo_oy/article/details/53375655(这些就是如果你的ssh的钥匙没有弄好，参考)


要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git； 
关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；



以下步骤比较清晰：来源（http://blog.csdn.net/echo_oy/article/details/53375655  echo_oy的csdn博客）
一、git基本配置
在https://github.com/中下载git后，安装并运行git
1.首先检测SSH keys，若已经存在key，则直接进入第三步

cd ~/.ssh
2.将原来的SSH keys备份并删除

mkdir key_backup
cp id_rsa* key_backup
rm id_rsa*
3.创建一个新的SSH key

复制代码
ssh-keygen -t rsa -C "your_email@youremail.com"
Creates a new ssh key using the provided email Generating public/private rsa key pair.
#此处输入将要保存的路径，默认为当前路径
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<press enter>
输入回车后提示输入一个类似于密码的自定义的通行证号，如果直接回车则为空
Enter passphrase (empty for no passphrase):<enter a passphrase>
#提示重新输入以便确认输入是否正确
Enter same passphrase again:<enter passphrase again>
复制代码
如果看到Your public key has been saved等信息则说明保存成功
4.将SSH key输入到GitHub网站中
在：Account Settings->SSH Pbulic Keys>单击Add another public key
将刚才新建的key输入到key中并且添加一个标题，例如：git-tutorial。即/Users/your_user_directory/.ssh/id_rsa。默认情况下.ssh是隐藏文件，需要将系统设置成显示隐藏文件才能看到。输入完成后单击Add key后，会看到git-tutorial已经被添加进去了。
5.测试是否能够正确链接到github中，输入以下命令：

ssh -T git@github.com


over.....
next.....

二、配置个人信息
当上面步骤完成后，就可以设置一些基本的个人信息了
1.设置用户名和邮箱
Git通过检测用户名和邮箱来跟踪进行commit的用户

git config --global user.name "Firstname Lastname"
git config --global user.email "your_email@youremail.com"
2.设置GitHub网站标记
单击网站中的Account Settings>Account Admin,将APT Token中的那串字符串记录下来，输入到下列命令中：

git config --global github.user username
git config --global github.token 获取到的token

***********************************************
这里需要注意一下：
github.token
为啥要使用github.token，因为yii需要用到这个，那么yii又是啥，是php的一个框架。
这是我目前对这个的了解
所以我没有获取这个。
***********************************************
2.设置GitHub网站标记
单击网站中的Account Settings>Account Admin,将APT Token中的那串字符串记录下来，输入到下列命令中：

git config --global github.user username
git config --global github.token 获取到的token
————————————————————————————————————————————————————————————————————————————————————
github.token获取：

参考http://blog.csdn.net/u014175572/article/details/55510825
https://www.cnblogs.com/jianqingwang/p/6840738.html
————————————————————————————————————————————————————————————————————————————————————

三、创建一个新的代码库
打开网站中的创建代码库按钮，或直接使用https://github.com/repositories/new链接打开。
输入相应的信息后单击创建按钮。
实例：
1.创建完成后在本地创建一个文件夹并在该文件夹下创建一个README文件

mkdir ~/Hello-World 在user目录下创建一个名为Hello-World的项目文件夹(~代表用户目录，即：C:\Documents and Settings\当前登陆系统的用户名)
cd ~/Hello-World 更改当前目录到Hello-World目录中
git init 初始化该文件夹，将会提示以下信息：
Initialized empty Git repository in /Users/your_user_directory/Hello-World/.git/
touch README
2.创建完README以后就需要添加并提交文件了

git add README
git commit -m "first commit"
至此已经将要更改的文件提交到头信息中，但并没有真正提交到网站上去，还需要执行下面两个命令：

git remote add origin git@github.com:gbyukg/zf-tutorial.git(若是第一次提交该项目的文件或是修改项目文件名后则需要这行这个命令，以后就可不用执行该命令)
git push -u origin master


开心吧！接下来开始使用git为编程带来乐趣吧！不够还要多多学习git的命令咯！
again:  https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000   廖雪峰的官方网站(这里我没有参考官方的教程)

https://git-scm.com/book/zh/v1/（官网详细教程）

http://git.mydoc.io/?t=154712（码云文档）


http://top.jobbole.com/34832/ 小心！别在Github上泄露了你Slack的token
Slack官方声明
在声明中，Slack写到：

Slack很清楚，token应该被跟密码一样对待。当开发者们生成token时，我们会警告他们不要分享给其他用户或其他程序。我们客户的安全对我们至关重要，我们会持续改进我们的文档，提醒客户保证安全。

我们在监控着公开的token，一旦我们发现了公开的token，我们会撤销他们并且通知创建token的用户和受影响的团队。

如何防范
Slack监控公开token的做法值得肯定，但是token上传的速度太快了，可能手速快的黑客可以在撤销之前找到它们。把Slack脚本/机器人上传到Github不应该把token一起上传上去，而是应该使用环境变量使token不出现在代码里面


开心吧！接下来开始使用git操作项目
在github上创建一个工程repository
admin@admin-PC MINGW64 /e/studyHard (master)
$ git clone git@github.com:yangmqCM/vue.git



如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。 
你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。 
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。 
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


1.创建分支
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git checkout -b dev
Switched to a new branch 'dev'

2.查看当前分支
admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git branch
* dev
  master
  
3.利用分支提交文件
admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git add README.md

admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git commit -m "branch test"
[dev 49d0869] branch test
 1 file changed, 1 insertion(+)

4.完成工作切换到master
admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

***切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：***

5.把dev分支的工作成果合并到master分支上： 
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git merge dev
Updating 079f74c..49d0869
Fast-forward
 README.md | 1 +
 1 file changed, 1 insertion(+)
 
6.合并完成后就删除分支
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git branch -d dev
Deleted branch dev (was 49d0869).

admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git branch
* master

****因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。****

Git鼓励大量使用分支： 
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>



1.分支冲突

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。

创建分支featurel
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git checkout -b featurel

Switched to a new branch 'featurel'

修改文件后执行
admin@admin-PC MINGW64 /e/studyHard/vue (featurel)
$ git add README.md

admin@admin-PC MINGW64 /e/studyHard/vue (featurel)
$ git commit -m "add simple"

[featurel ef28032] add simple
 1 file changed, 1 insertion(+)

切换到master
admin@admin-PC MINGW64 /e/studyHard/vue (featurel)
$ git checkout master

Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

 再次修改文件执行
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git add README.md

admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git commit -m "and simple"

[master 3756283] and simple
 1 file changed, 1 insertion(+)
 
合并分支。。。
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git merge featurel

Auto-merging README.md
CONFLICT (content): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.

文件会出现两次修改的内容，并有<<<<

admin@admin-PC MINGW64 /e/studyHard/vue (master|MERGING)
$ git status

On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")

这里把文件修改成你第一次写的内容，删除其余的保存。
再次执行提交
admin@admin-PC MINGW64 /e/studyHard/vue (master|MERGING)
$ git add README.md

admin@admin-PC MINGW64 /e/studyHard/vue (master|MERGING)
$ git commit -m "fixed"

[master cd8349a] fixed

展示出分支合并的日志
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git log --graph --pretty=oneline --abbrev-commit

*   cd8349a fixed
|\
| * ef28032 add simple
* | 3756283 and simple
|/
* 49d0869 branch test
* 079f74c Initial commit

删除分支
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git branch -d featurel

Deleted branch featurel (was ef28032).

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 
用git log --graph命令可以看到分支合并图。


分支管理策略：目的是合并删除分支后，可以从分支历史上就可以看出分支信息。
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

下面我们实战一下--no-ff方式的git merge：
admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git checkout -b dev

Switched to a new branch 'dev'

admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git add README.md

admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git commit -m "add merge"

[dev c2731bc] add merge
 1 file changed, 1 insertion(+), 1 deletion(-)

admin@admin-PC MINGW64 /e/studyHard/vue (dev)
$ git checkout master

Switched to branch 'master'
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git merge --no-ff -m "merge with no-f" dev

Merge made by the 'recursive' strategy.
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

admin@admin-PC MINGW64 /e/studyHard/vue (master)
$ git log --graph --pretty=oneline --abbrev-commit

*   6166471 merge with no-f
|\
| * c2731bc add merge
|/
*   cd8349a fixed
|\
| * ef28032 add simple
* | 3756283 and simple
|/
* 49d0869 branch test
* 079f74c Initial commit

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理： 
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活； 
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本； 
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
Git分支十分强大，在团队开发中应该充分应用。 
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。



bug分支
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？ 
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash 保存当前工作区
$ git checkout master 回到bug所在的分支
$ git checkout -b issue-101 创建一个分支
$ git add readme.txt 
$ git commit -m "fix bug 101" 修改bug后提交
$ git checkout master  切换到分支
$ git merge --no-ff -m "merged bug fix 101" issue-101 合并
$ git checkout dev切换到刚才的工作区分支
$ git stash list  工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看： 

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法： 
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除； 
另一种方式是用git stash pop，恢复的同时把stash内容也删了： 
$ git stash pop

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令： 
$ git stash apply stash@{0}



feature分支
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。 
现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。
$ git checkout -b feature-vulcan
Switched to a new branch 'feature-vulcan'

$ git add vulcan.py
$ git status 
$ git commit -m "add feature vulcan"

一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。 
但是， 
就在此时，接到上级命令，因经费不足，新功能必须取消！ 
虽然白干了，但是这个分支还是必须就地销毁：

*********************************************************************
$ git branch -d feature-vulcan 
销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。 
现在我们强行删除：

$ git branch -D feature-vulcan
************************************************************************



多人协作 （代码提交冲突的问题）

查看远程信息库
admin@admin-PC MINGW64 /e/studyHard (master)
$ $git remote -v
bash: remote: command not found

admin@admin-PC MINGW64 /e/studyHard (master)
$ git remote  -v
origin  git@github.com:yangmqCM/studyHard.git (fetch)
origin  git@github.com:yangmqCM/studyHard.git (push) //如果没有推送权限，就看不到push的地址。

admin@admin-PC MINGW64 /e/studyHard (master)
$ git branch
* master


推送分支
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： 
admin@admin-PC MINGW64 /e/studyHard (master)
$ git push origin master

Everything up-to-date

如果要推送其他分支，比如dev，就改成： 
$ git push origin dev

_________________________________________________________________________________
master分支是主分支，因此要时刻与远程同步； 
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； 
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug； 
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
__________________________________________________________________________________


抓取分支
多人协作时，大家都会往master和dev分支上推送各自的修改。 
现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：

admin@admin-PC MINGW64 /e/studyHard (master)
$ git clone git@github.com:yangmqCM/studyGit.txt
fatal: destination path 'studyGit.txt' already exists and is not an empty directory.

当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看： 
$ git branch
* master

现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
admin@admin-PC MINGW64 /e/studyHard (master)
$ git checkout -b dev origin/dev
fatal: Cannot update paths and switch to branch 'dev' at the same time.
Did you intend to checkout 'origin/dev' which can not be resolved as commit?

现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
$ git commit -m "add /usr/bin/env"
$ git push origin dev

****************************************************************************************
你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：

$ git add hello.py 
$ git commit -m "add coding: utf-8"


[dev bd6ae48] add coding: utf-8
 1 file changed, 1 insertion(+)
 
 
$ git push origin dev


To git@github.com:michaelliao/learngit.git
 ! [rejected]        dev -> dev (non-fast-forward)
error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

***********************************************************************************************

**********************************************************************************************
推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：

$ git pull


remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:michaelliao/learngit
   fc38031..291bea8  dev        -> origin/dev
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream dev origin/<branch>
**********************************************************************************************
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：

$ git branch --set-upstream dev origin/dev

Branch dev set up to track remote branch dev from origin.
再pull：

$ git pull
*********************************************************************************************
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：

$ git commit -m "merge & fix hello.py"

[dev adca45d] merge & fix hello.py

$ git push origin dev

Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 747 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
   291bea8..adca45d  dev -> dev
********************************************************************************************************

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。


创建标签：：
admin@admin-PC MINGW64 /e/studyHard (master)
$ git tag v1.0

admin@admin-PC MINGW64 /e/studyHard (master)
$ git tag
v1.0

默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？ 
方法是找到历史提交的commit id，然后打上就可以了

admin@admin-PC MINGW64 /e/studyHard (master)
$ git log --pretty=oneline --abbrev-commit    

ca4d04e push
c453f1a study branch
897f984 about Git token
fffb368 Git summary
8a0e594 remove test.txt
da56871 add test.txt
1b8ae58 two bb
09f44a2 git tracks changes
ffde194 how to study hard git
de626e1 append GPL
9284d01 add 3 files
a7dd746 wrote a readme file

看日志
admin@admin-PC MINGW64 /e/studyHard (master)
$ git log --s
--shortstat                --src-prefix=
--show-signature           --stat
--simplify-by-decoration   --submodule
--simplify-merges          --submodule=
--since=                   --summary
--sparse

admin@admin-PC MINGW64 /e/studyHard (master)
$ git log --s



admin@admin-PC MINGW64 /e/studyHard (master)
$ git tag v0.2 fffb368

admin@admin-PC MINGW64 /e/studyHard (master)
$ git tag

v0.2
v1.0

admin@admin-PC MINGW64 /e/studyHard (master)
$ git show v0.2                                      显示标签信息

commit fffb368961a753c85d8c3d1da444da538eb29d31
Author: yangmqCM <15827408750@163>
Date:   Thu Mar 15 15:53:44 2018 +0800

    Git summary

diff --git a/studyGit.txt b/studyGit.txt
index 359cc1e..0df3048 100644
--- a/studyGit.txt
+++ b/studyGit.txt
@@ -3,3 +3,274 @@ Git is free software distributed under the Gpl
 Git的命令实在是太多了，焦灼咋记录哟。
 多次使用，记得使用，每天使用，每天重复
 学无止境，马不停蹄，每天学习，每天进步，不骄不躁，不懈怠
+
+接下来表达一下我学习git的过程（总结）：
+https://git-scm.com/downloads 下载安装 
+

_____________________________________________________________________
可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：

$ git tag -a v0.1 -m "version 0.1 released" 3628164
用命令git show <tagname>可以看到说明文字：



这个不清楚。待查
【还可以通过-s用私钥签名一个标签：

$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：

gpg: signing failed: secret key not available
error: gpg failed to sign the data
error: unable to sign the tag
如果报错，请参考GnuPG帮助文档配置Key。

用命令git show <tagname>可以看到PGP签名信息：
用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了。
】




删除标签

admin@admin-PC MINGW64 /e/studyHard (master)
$ git tag -d v1.0

Deleted tag 'v1.0' (was ca4d04e)

推送标签
admin@admin-PC MINGW64 /e/studyHard (master)
$ git push origin v0.1

Counting objects: 1, done.
Writing objects: 100% (1/1), 164 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To github.com:yangmqCM/studyHard.git
 * [new tag]         v0.1 -> v0.1

 推送 所有标签
admin@admin-PC MINGW64 /e/studyHard (master)
$ git push origin --tags

Total 0 (delta 0), reused 0 (delta 0)
To github.com:yangmqCM/studyHard.git
 * [new tag]         v0.2 -> v0.2

 
 删除本地标签
admin@admin-PC MINGW64 /e/studyHard (master)
$ git tag -d v0.2
Deleted tag 'v0.2' (was fffb368)

再删除远程推送标签
admin@admin-PC MINGW64 /e/studyHard (master)

$ git push origin :refs/tags/v0.2
To github.com:yangmqCM/studyHard.git
 - [deleted]         v0.2

 
 
 使用GitHub
如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：

git clone git@github.com:michaelliao/bootstrap.git
一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

那就Fork一下我的仓库：https://github.com/michaelliao/learngit，创建一个your-github-id.txt的文本文件，写点自己学习Git的心得，然后推送一个pull request给我，我会视心情而定是否接受。

小结
在GitHub上，可以任意Fork开源仓库； 
自己拥有Fork后的仓库的读写权限；

可以推送pull request给官方仓库来贡献代码。


自定义GIT 配置别名 我都是看了看没有操作。因为我记不得自己的密码，所以不用起别名。
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000
搭建GIT服务器（这个我不会linux，到此为止吧。到时候自己开公司，搞一个）
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000



小技巧：

在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议： 
$ git co<tab><tab>
commit config
此例中，键入 git co 然后连按两次 Tab 键，会看到两个相关的建议（命令） commit 和 config。继而输入 m<tab> 会自动完成 git commit 命令的输入。

命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行 git log 的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲 Tab 键看看有哪些匹配的： 
$ git log --s<tab>
--shortstat  --since=  --src-prefix=  --stat   --summary



小知识：
从远程仓库抓取数据
正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：
 
$ git fetch [remote-name]

如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。

如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。


远程仓库的删除和重命名
在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：

$ git remote rename pb paul
$ git remote
origin
paul
注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 paul/master。

碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令：

$ git remote rm paul
$ git remote
origin

这两个多看看，遇到多用
https://git-scm.com/book/zh/v1
https://git-scm.com/book/zh/v1/Git-基础-查看提交历史
https://git-scm.com/book/zh/v1/Git-基础-记录每次更新到仓库
https://git-scm.com/book/zh/v1/Git-分支-远程分支    （*****协同开发的时候很重要，对于分支的处理*******）

********************************************************************
了解gpg公钥：   http://wiki.ubuntu.org.cn/GPG/PGP


Git的官方网站：http://git-scm.com

Git的官方网站中文https://git-scm.com/book/zh/v1/


以上只是简单的操作：
Git的官方网站中文https://git-scm.com/book/zh/v1/
还需要了解这些。 
. 服务器上的 Git
.1 协议
.2 在服务器上部署 Git
.3 生成 SSH 公钥
.4 架设服务器
.5 公共访问
.6 GitWeb
.7 Gitosis
.8 Gitolite
.9 Git 守护进程
.10 Git 托管服务
.11 小结
. 分布式 Git
.1 分布式工作流程
.2 为项目作贡献
.3 项目的管理
.4 小结
. Git 工具
.1 修订版本（Revision）选择
.2 交互式暂存
.3 储藏（Stashing）
.4 重写历史
.5 使用 Git 调试
.6 子模块
.7 子树合并
.8 总结
. 自定义 Git
.1 配置 Git
.2 Git属性
.3 Git挂钩
.4 Git 强制策略实例
.5 总结
. Git 与其他系统
.1 Git 与 Subversion
.2 迁移到 Git
.3 总结
. Git 内部原理
.1 底层命令 (Plumbing) 和高层命令 (Porcelain)
.2 Git 对象
.3 Git References
.4 Packfiles
.5 The Refspec
.6 传输协议
.7 维护及数据恢复
.8 总结